# Group Members: Aidan Peirce (AP), Owen Pastorius (OP), Finnan Weber (FW)
# Student IDs (respectively): 20942995, 20944518, 20952343

import random # Imports the random module for use in the getSecretNum function (AP)
NUM_DIGITS = 3 # Assigns the variable NUM_DIGITS to the number of digits in the number that will be used in the game (AP)
MAX_GUESS = 10 # Assigns the variable MAX_GUESS to the maximum number of guesses to be taken before the game ends (AP)

def getSecretNum(): # Defines the function getSecretNum, which returns a string of unique random digits that is NUM_DIGITS long (AP)
    numbers = list(range(10)) # Assigns the variable numbers to a list containing the ten integers from 0 to 9 (AP)
    random.shuffle(numbers) # Uses the random module to shuffle the elements of numbers (AP)
    secretNum = '' # Assigns the variable secretNum to an empty string to be used in the for loop below (AP)
    for i in range(NUM_DIGITS): # Starts a for loop for all i in a range of NUM_DIGITS (i.e. 0, 1, 2, ...) (AP)
        secretNum += str(numbers[i]) # Reassigns secretNum for each instance in the loop, appending a random integer from 0 to 9 to the end of the string for each digit (AP)
    return secretNum # Returns the new, reassigned string secretNum as a result of the function (AP)

def getClues(guess, secretNum): # Defines the function getClues, which returns a string with the Pico, Fermi, & Bagels clues to the user (AP)
    if guess == secretNum: # Initial if statement to test if the guess is equal to the number the game is thinking of, secretNum (AP)
        return 'Al Dante' # Returns a text string if the above statement is true, else the function continues (AP)

    clues = [] # Assigns the variable clues to an empty list to be used in the following for loop (AP)
    for i in range(len(guess)): # Starts a for loop for all i in the range of the length of the user's guess (AP)
        if guess[i] == secretNum[i]: # Determines if the i'th index of guess is the same as the i'th index of secretNum (AP)
            clues.append('Fermi') # If the above is true, appends 'Fermi' to the clue list to be displayed after the guess (AP)
        elif guess[i] in secretNum: # Determines if the i'th index of guess is present anywhere in secretNum (AP)
            clues.append('Pico') # If the above is true, appends 'Pico' to the clue list to be displayed after the guess (AP)
    if len(clues) == 0: # Determines if there are no strings present in clues after the above loop, meaning no digits of secretNum are present in guess (AP)
        return 'Bagels' # If the above is true, returns 'Bagels' instead of anything in clues (AP)

    clues.sort() # Sorts the list (clues) alphabetically so the player cannot know any relative orders of the clues with respect to secretNum (AP)
    return ' '.join(clues) # As the final result of the function, joins clues into one string, separating each element of the list by a space, and returns the result (AP)

def isOnlyDigits(num): # Defines the function isOnlyDigits, which returns True if num is a string of only digits. Otherwise, it returns False (OP)
    if num == '': # Checks to make sure the string is not empty, if it is it returns False (OP)
        return False # returns False, which is used by other fucntions(OP)

    for i in num: # Uses variable i to represent digits(OP)
        if i not in '0 1 2 3 4 5 6 7 8 9'.split(): # If the input contains characters other than the digits given here it returns False(OP)
            return False # returns False, which is used by other fucntions(OP)

    return True #If the input does not run any of the above errors it will return True(OP)


print('I am thinking of a %s-digit number. Try to guess what it is.' %(NUM_DIGITS)) #prints out the initial game statement that tells the user what to do after they input how long they want the number to be(OP)
print('The clues I give are...') #prints out a statement outlining what the hints will be(OP)
print('When I say:    That means:') #prints the meaning to each clue keyword(OP)
print(' Bagels        None of the digits is correct.') #prints keyword 'Bagels' once meaning none of the numbers that were inputed are correct(OP)
print(' Pico          One digit is correct but in the wrong position.') #prints keyword 'Pico' for each digit that is correct but is oriented wrong and does not tell you which digit it is(OP)
print(' Fermi         One digit is correct and in the right position.') #prints keyword 'Fermi' for each digit that is correct and in the right position but does not tell you which one(OP)
print(' Al Dante      You got it!') #prints Keyword 'Al Dante' when the user has guessed the right number to indicate that they have won the game(OP) 

while True:
    secretNum = getSecretNum() #defines the variable "secretNum" by using the function getSecretNum which is used as the number the user attempts to guess (FW)
    print('I have thought up a number. You have %s guesses to get it.' %(MAX_GUESS)) #prints out a statement informing the user that they have a certain amount of guesses, defined by "MAX_GUESS"

    guessesTaken = 1 #defines the variable guessesTaken as one, this variable will be used in the following while loop (FW) 
    while guessesTaken <= MAX_GUESS: #starts a loop that runs until the user has made the maximun number of guesses, MAX_GUESS (FW)
        guess = '' #defines the variable guess as an empty string, this will be filled later by an user input (FW)
        while len(guess) != NUM_DIGITS or not isOnlyDigits(guess): #starts a while loop that will prompt the user for an input while the variable guess is not the right length or type. The empty string ddefined as guess earlier will enter this loop, and the loop will also ensure that the user's input is valid (FW)
            print('Guess #%s: ' % (guessesTaken)) #prints out the guess number, equal to the variable guessesTaken, which was previously defined and will be changed later in this loop (FW)
            guess = input() #prompts the user to input their guess

        print(getClues(guess, secretNum)) #prints out the function getClues, which gives hints to the user as to what values of theirs are correct (FW)
        guessesTaken += 1 #adds one to the guessesTaken value, which once it reaches 11 (one above MAX_GUESS) it will stop fulfilling the requirements of the while loop, and exiting it (FW)

        if guess == secretNum: #if the user has correctly guessed the number, it will exit the loop (FW)
            break
        if guessesTaken > MAX_GUESS: #if the amount of guesses reaches 11 (one above MAX_GUESS) it will print out a statement informing the user that they have ran out of guesses (FW)
            print('You ran out of guesses. The answer was %s.' %(secretNum))

    print('Do you want to play again? (yes or no)') #asks the user if they would like to play again (FW)
    if not input().lower().startswith('y'): #promps the user to input whether they would like to play again, and if their answer does not begin with a y it will exit, if not, the origional loop will repeat itself, starting the game again (FW)
        break
